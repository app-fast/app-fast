#!/bin/bash

DOWNLOADARGS='-c -s16 -k1M -x16 -j16 -t10 --connect-timeout=10 --file-allocation=none'

if ping -c 1 -W 1 8.8.8.8 2>/dev/null | grep -q -i "ttl"; then
  DOWNLOADARGS="$DOWNLOADARGS --async-dns-server=8.8.8.8"
fi

######################
#                    #
#     Apple macOS    #
#                    #
######################
if echo "$OSTYPE" | grep -q "darwin" && echo "$@" | grep -q -E "upgrade|install"; then
  [ "`whoami`" = root ] && echo "Please don't use sudo." && exit 1
  ! [ $(command -v brew) ] && echo "Please install homebrew first." && exit 1

  mkdir -p ~/Library/Caches/Homebrew/downloads
  cd ~/Library/Caches/Homebrew/downloads
  baseurl=$([ ${HOMEBREW_BOTTLE_DOMAIN} ] && echo "${HOMEBREW_BOTTLE_DOMAIN}" || echo "https://homebrew.bintray.com")

  # Download unfinished jobs
  [ $(command -v aria2c) ] || brew install aria2
  [ -f app-fast.list ] && echo "Downloading unfinished jobs." && aria2c $DOWNLOADARGS -i app-fast.list

  # Create new jobs
  packages=""
  if echo "$@" | grep -q "upgrade"; then
    packages=($(brew outdated --quiet))
  elif echo "$@" | grep -q "install"; then
    packages=($(echo " ${@:2} " | perl -C -Mutf8 -pe "s/ -[a-zA-Z-]\+//g"))
  fi


  for package in "${packages[@]}"
  do
    alldeps=$package
    if echo "$@" | grep -q "install"; then
      echo "Fetching $package"
      alldeps=$(echo -e "${package}\n$(brew deps $package)")
    fi

    while read -r dep; do
      filename=$(echo "$dep" | perl -C -Mutf8 -pe "s/.*--//")
      cachename=$(echo "$dep" | perl -C -Mutf8 -pe "s/.*\///")
      echo "$baseurl/bottles/$filename" | tee -a app-fast.list
      echo " out=$cachename" | tee -a app-fast.list
    done <<< "$(brew --cache $(echo \\"${alldeps}\\"))"
  done

  [ -f app-fast.list ] && aria2c $DOWNLOADARGS -i app-fast.list

  echo "Executing: brew $@"
  HOMEBREW_NO_INSTALL_CLEANUP=1 brew $@ && rm -f app-fast.list && exit 0

  exit 1
fi

######################
#                    #
#      GNU/Linux     #
#                    #
######################

if [ "$OSTYPE" = "linux-gnu" ]; then
  [ "`whoami`" = "root" ] || exec sudo "$0" "$@"
fi

######################
#                    #
#    Ubuntu/Debian   #
#                    #
######################

if [ $(command -v apt-get) ] && echo "$@" | grep -q -E "upgrade|install|dist-upgrade|full-upgrade|build-dep"; then

  APT=$([ $(command -v apt) ] && echo "apt" || echo "apt-get")

  [ $(command -v aria2c) ] || $APT install -y aria2

  # Download unfinished jobs
  eval $(apt-config shell CACHE Dir::Cache)
  eval $(apt-config shell ARCHIVES Dir::Cache::archives)
  cachedir="/${CACHE}/${ARCHIVES}/partial"
  mkdir -p $cachedir
  cd $cachedir
  [ -f app-fast.list ] && echo "Downloading unfinished jobs." && aria2c $DOWNLOADARGS -i app-fast.list

  # Create new jobs
  $APT -y --print-uris $@ | grep -E -o -e "(ht|f)tp[s]?://[^\']+" | tee app-fast.list && aria2c $DOWNLOADARGS -i app-fast.list

  echo "Executing: $APT $@"
  $APT $@ && rm -f app-fast.list && exit 0
  exit 1

elif [ $(command -v apt-get) ] && echo "$@" | grep -q "update"; then

  APT=$([ $(command -v apt) ] && echo "apt" || echo "apt-get")
  $APT -o 'Acquire::Queue-mode=host; APT::Acquire=Retries 2;' update
  exit 0

fi

######################
#                    #
#     Arch/Msys2     #
#                    #
######################

if [ $(command -v pacman) ] && echo "$@" | grep -q "\-S"; then

  [ $(command -v aria2c) ] || pacman -S --noconfirm --needed aria2

  # Download unfinished jobs
  cachedir=$(pacman-conf Cachedir)
  mkdir -p $cachedir
  cd $cachedir
  [ -f app-fast.list ] && echo "Downloading unfinished jobs." && aria2c $DOWNLOADARGS -i app-fast.list

  # Create new jobs
  pacman $@ --print --print-format "%l" | grep -E -o -e "(ht|f)tp[s]?://[^\']+" | tee app-fast.list && aria2c $DOWNLOADARGS -i app-fast.list

  echo "Executing: pacman $@"
  pacman $(echo "$1" | sed "s/y//g") ${@:2} && rm -f app-fast.list && exit 0
  exit 1
fi
